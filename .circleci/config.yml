# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2
  heroku: circleci/heroku@0.0.10

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-lint-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.8 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.8
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Lint
          # This assumes flake8 is installed via the install-package step above
          command: flake8
      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: pytest
  
  build-and-push-docker-image:
    docker:
      - image: cimg/python:3.8
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS 
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.6
          docker_layer_caching: false

      # build and push Docker image
      - run: |
          docker build -t yannis971/test_docker:$CIRCLE_SHA1 .
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
          docker tag yannis971/test_docker:$CIRCLE_SHA1 yannissaliniere/test_docker:$CIRCLE_SHA1
          docker push yannissaliniere/test_docker:$CIRCLE_SHA1

  heroku-deploy:
    docker:
      - image: cimg/python:3.8
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS 
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.6
          docker_layer_caching: false
      - run: |
          set -ex
          sudo curl https://cli-assets.heroku.com/install.sh | sh
          echo $HEROKU_API_KEY | docker login --username=_ --password-stdin registry.heroku.com
          heroku maintenance:on --app=$HEROKU_APP_NAME
          docker pull yannissaliniere/test_docker:$CIRCLE_SHA1
          docker tag yannissaliniere/test_docker:$CIRCLE_SHA1 registry.heroku.com/$HEROKU_APP_NAME/web
          docker push registry.heroku.com/$HEROKU_APP_NAME/web
          heroku container:release web 
          heroku maintenance:off --app=$HEROKU_APP_NAME

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-lint-test
      - build-and-push-docker-image:
         filters: 
           branches:
             only: main
         requires:
           - build-lint-test
      - heroku-deploy:
         filters: 
           branches:
             only: main
         requires:
           - build-and-push-docker-image 
